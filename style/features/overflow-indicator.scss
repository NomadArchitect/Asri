@use '../base' as *;
@use "sass:string";

@mixin scroll-divider-line($height: 1px) {
    &::before {
        content: '';
        display: block;
        position: sticky;
        top: 0;
        width: 100%;
        height: $height;
        z-index: 1;
        opacity: 0;
        background-color: var(--b3-border-color-trans);

        animation-name: maskAppear-bgClr;
        animation-timeline: scroll();
        animation-range: 2px 100%;

        margin-bottom: calc(-1 * $height);

        pointer-events: none;
    }
}

@mixin scroll-divider-fadein-bgClr($size: 12px, $bg-clr: var(--b3-theme-background), $range: 'top bottom') {
    $range-dir: (
        'top': 'to bottom',
        'bottom': 'to top',
        'left': 'to right',
        'right': 'to left',
    );

@if str-index($range, 'top') or str-index($range, 'left') {
    $dir: map-get($range-dir, nth(string.split($range, ' '), 1));

    &::before {
        content: '';
        display: block;
        position: sticky;
        z-index: 1;
        opacity: 0;

        animation-name: maskAppear-bgClr;
        animation-range: 1px 100%;

        background-image: linear-gradient(#{$dir}, $bg-clr, transparent);

        margin-#{str-slice($dir, 4)}: calc(-1 * $size);

        pointer-events: none;

        @if $dir =='to bottom' {
            top: 0;
            width: 100%;
            height: $size;
            animation-timeline: scroll();
        }

        @else {
            left: 0;
            min-width: $size;
            height: 100%;
            animation-timeline: scroll(x);
        }
    }
}

@if str-index($range, 'bottom') or str-index($range, 'right') {
    $dir: map-get($range-dir, nth(string.split($range, ' '), -1)); // -> 'to top' / 'to left'

    &::after {
        content: '';
        display: block;
        position: sticky;
        z-index: 1;
        opacity: 0;

        animation-name: maskAppear-bgClr;
        animation-range: 0% calc(100% - 1px);
        animation-direction: alternate-reverse;

        background-image: linear-gradient(#{$dir}, $bg-clr, transparent);

        margin-#{str-slice($dir, 4)}: calc(-1 * $size);

        pointer-events: none;

        @if $dir =='to top' {
            bottom: 0;
            width: 100%;
            height: $size;
            animation-timeline: scroll();
        }

        @else {
            right: 0;
            min-width: $size;
            height: 100%;
            animation-timeline: scroll(x);
        }
    }
}
}

@mixin scroll-divider-fadein-mask($size: 12px, $range: 'top bottom') {

    $range-start: nth(string.split($range, ' '), 1);
    $range-end: nth(string.split($range, ' '), -1);
    $gradient-dir: '';
    $this-id: unique-id();

    @if str-index($range, 'top') or str-index($range, 'bottom') {
        $gradient-dir: 'to bottom';
    }

    @else {
        $gradient-dir: 'to right';
    }

    mask-image: linear-gradient(#{$gradient-dir}, transparent, black var(--mask-stop-start), black calc(100% - var(--mask-stop-end)), transparent);

    $anim-name: (
    );
$anim-range: (
);
$anim-dir: (
);

@if $range-start =='top' or $range-start =='left' {
    $anim-name: append($anim-name, 'maskAppear-mask-start-#{$this-id}', comma);
    $anim-range: append($anim-range, '1px 100%', comma);
    $anim-dir: append($anim-dir, 'alternate', comma);
}

@if $range-end =='bottom' or $range-end =='right' {
    $anim-name: append($anim-name, 'maskAppear-mask-end-#{$this-id}', comma);
    $anim-range: append($anim-range, '0% calc(100% - 1px)', comma);
    $anim-dir: append($anim-dir, 'alternate-reverse', comma);
}

animation-name: #{$anim-name};
animation-range: #{$anim-range};
animation-direction: #{$anim-dir};

@if $range-start =='top' or $range-start =='bottom' {
    animation-timeline: scroll(self y);
}

@else {
    animation-timeline: scroll(self x);
}

@keyframes maskAppear-mask-start-#{$this-id} {
    0% {
        --mask-stop-start: 0px;
    }

    1% {
        --mask-stop-start: #{$size};
    }

    100% {
        --mask-stop-start: #{$size};
    }
}

@keyframes maskAppear-mask-end-#{$this-id} {
    0% {
        --mask-stop-end: 0px;
    }

    1% {
        --mask-stop-end: #{$size};
    }

    100% {
        --mask-stop-end: #{$size};
    }
}
}

@property --mask-stop-start {
    syntax: '<length>';
    inherits: false;
    initial-value: 0px;
}

@property --mask-stop-end {
    syntax: '<length>';
    inherits: false;
    initial-value: 0px;
}

.file-tree:not(.sy__backlink) .block__icons~.fn__flex-1,
.sy__file>.b3-list>.fn__flex-1 {
    @include scroll-divider-fadein-mask(18px, 'top');
}

.file-tree.sy__file .block__icons~.fn__flex-1 {
    @include scroll-divider-fadein-mask(18px, 'top bottom');
}

.layout__dockb.layout--float .file-tree:not(.sy__backlink) .block__icons~.fn__flex-1 {
    @include scroll-divider-fadein-mask(18px, 'top bottom');
}

// .file-tree.sy__backlink .backlinkList {
//     @include scroll-divider-fadein-mask(18px, 'bottom');
// } //文字编辑工具条会被裁切

.layout__dockb {
    .file-tree:not(.sy__backlink) .block__icons~.fn__flex-1 {
        @include scroll-divider-fadein-mask(18px, 'top');
    }
}

[data-name="bazaar"] .config-bazaar__panel {
    @include scroll-divider-fadein-bgClr(30px, $range: 'top');

    &::before {
        top: 44px;
        z-index: 2;
    }
}

[data-name="AI"] .layout-tab-bar+.fn__flex-1,
.history__repo[data-type="repo"] .b3-list--background,
[data-key="dialog-snippets"] .b3-dialog__body>.fn__flex-1 {
    @include scroll-divider-fadein-bgClr(20px, $range: 'top');
}

[data-key="dialog-snippets"] .b3-dialog__body>.fn__flex-1 {

    &::before {
        top: -16px;
    }
}

.b3-dialog .emojis__panel {
    @include scroll-divider-line;

    &::before {
        width: calc(100% + 16px);
        margin-left: -8px;
        margin-right: -8px;
    }
}

.protyle-breadcrumb__bar {
    @include scroll-divider-fadein-mask($range: 'left right');
}

@keyframes maskAppear-bgClr {
    0% {
        opacity: 0;
    }

    1% {
        opacity: 1;
    }

    100% {
        opacity: 1;
    }
}